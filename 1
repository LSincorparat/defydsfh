--[[
    Stratus UI Library v1.0
    Ultra-futuristic GUI framework for Roblox exploiters
    Designed for Synapse X, Fluxus, and other executors
    
    Features:
    - Stunning dark mode interface with neon accents
    - Smooth animations and transitions
    - Fully customizable theme system
    - Persistent UI state
    - Advanced component system
    - Crash-resistant layout
]]

if not getgenv then
    error("Stratus requires an executor environment (Synapse X, Fluxus, etc.)")
end

-- Initialize global Stratus environment
getgenv().Stratus = {
    Version = "1.0",
    Themes = {},
    Instances = {},
    Settings = {
        EnableAnimations = true,
        EnableBlurEffects = true,
        DefaultTheme = "NeonBlue",
        SaveSettings = true
    },
    _Components = {}
}

-- Core services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

-- Utility functions
local function Create(class, props)
    local instance = Instance.new(class)
    for prop, value in pairs(props) do
        if prop ~= "Parent" then
            if pcall(function() return instance[prop] end) then
                instance[prop] = value
            end
        end
    end
    instance.Parent = props.Parent
    return instance
end

local function Round(num, decimalPlaces)
    local mult = 10^(decimalPlaces or 0)
    return math.floor(num * mult + 0.5) / mult
end

local function Tween(instance, properties, duration, style, direction)
    if not Stratus.Settings.EnableAnimations then
        for prop, value in pairs(properties) do
            instance[prop] = value
        end
        return
    end
    
    local tweenInfo = TweenInfo.new(
        duration or 0.2,
        style or Enum.EasingStyle.Quad,
        direction or Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(instance, tweenInfo, properties)
    tween:Play()
    return tween
end

local function IsMouseOverFrame(frame)
    local mouse = UserInputService:GetMouseLocation()
    local absolutePosition = frame.AbsolutePosition
    local absoluteSize = frame.AbsoluteSize
    
    return mouse.X >= absolutePosition.X and mouse.X <= absolutePosition.X + absoluteSize.X and
           mouse.Y >= absolutePosition.Y and mouse.Y <= absolutePosition.Y + absoluteSize.Y
end

-- Theme management
Stratus.Themes = {
    NeonBlue = {
        Background = Color3.fromRGB(15, 15, 20),
        Background2 = Color3.fromRGB(25, 25, 35),
        Background3 = Color3.fromRGB(40, 40, 50),
        Accent = Color3.fromRGB(0, 162, 255),
        Accent2 = Color3.fromRGB(0, 234, 255),
        Text = Color3.fromRGB(240, 240, 240),
        Text2 = Color3.fromRGB(200, 200, 200),
        Shadow = Color3.fromRGB(0, 80, 120),
        ShadowTransparency = 0.7
    },
    Aqua = {
        Background = Color3.fromRGB(10, 15, 20),
        Background2 = Color3.fromRGB(20, 30, 40),
        Background3 = Color3.fromRGB(35, 45, 60),
        Accent = Color3.fromRGB(0, 255, 209),
        Accent2 = Color3.fromRGB(0, 180, 219),
        Text = Color3.fromRGB(240, 240, 240),
        Text2 = Color3.fromRGB(200, 200, 200),
        Shadow = Color3.fromRGB(0, 120, 100),
        ShadowTransparency = 0.7
    },
    PurpleGlow = {
        Background = Color3.fromRGB(15, 10, 20),
        Background2 = Color3.fromRGB(30, 20, 40),
        Background3 = Color3.fromRGB(50, 35, 65),
        Accent = Color3.fromRGB(170, 0, 255),
        Accent2 = Color3.fromRGB(220, 0, 255),
        Text = Color3.fromRGB(240, 240, 240),
        Text2 = Color3.fromRGB(200, 200, 200),
        Shadow = Color3.fromRGB(90, 0, 120),
        ShadowTransparency = 0.7
    }
}

function Stratus:SetTheme(themeNameOrTable)
    if type(themeNameOrTable) == "string" then
        if not self.Themes[themeNameOrTable] then
            error("Theme '" .. themeNameOrTable .. "' not found")
        end
        self.Settings.DefaultTheme = themeNameOrTable
    elseif type(themeNameOrTable) == "table" then
        -- Validate theme table
        local required = {"Background", "Background2", "Accent", "Text"}
        for _, key in ipairs(required) do
            if not themeNameOrTable[key] then
                error("Invalid theme: missing key '" .. key .. "'")
            end
        end
        self.Themes["Custom"] = themeNameOrTable
        self.Settings.DefaultTheme = "Custom"
    else
        error("Invalid theme argument type")
    end
    
    -- Update existing UI elements if any
    if self.Instances.MainWindow then
        self:_ApplyTheme(self.Instances.MainWindow)
    end
end

function Stratus:_ApplyTheme(parent)
    local theme = self.Themes[self.Settings.DefaultTheme]
    
    for _, instance in pairs(parent:GetDescendants()) do
        if instance:IsA("Frame") or instance:IsA("ScrollingFrame") then
            if instance.Name == "Background" then
                instance.BackgroundColor3 = theme.Background
            elseif instance.Name == "Header" then
                instance.BackgroundColor3 = theme.Background2
            elseif instance.Name == "ElementFrame" then
                instance.BackgroundColor3 = theme.Background3
            end
        elseif instance:IsA("TextLabel") or instance:IsA("TextButton") or instance:IsA("TextBox") then
            if instance.Name == "Title" or instance.Name == "HeaderTitle" then
                instance.TextColor3 = theme.Text
            elseif instance.Name == "Subtitle" or instance.Name == "Description" then
                instance.TextColor3 = theme.Text2
            end
        elseif instance:IsA("UIStroke") then
            if instance.Name == "AccentStroke" then
                instance.Color = theme.Accent
            end
        end
    end
end

-- Core window creation
function Stratus:CreateWindow(title)
    if self.Instances.MainWindow then
        self.Instances.MainWindow:Destroy()
    end
    
    -- Main window container
    local MainWindow = Create("ScreenGui", {
        Name = "StratusWindow",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global
    })
    
    -- Main window frame
    local WindowFrame = Create("Frame", {
        Name = "MainWindow",
        Size = UDim2.new(0, 450, 0, 500),
        Position = UDim2.new(0.5, -225, 0.5, -250),
        BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background,
        AnchorPoint = Vector2.new(0.5, 0.5),
        Parent = MainWindow
    })
    
    -- Window corner rounding
    local UICorner = Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = WindowFrame
    })
    
    -- Window drop shadow
    local UIStroke = Create("UIStroke", {
        Name = "WindowStroke",
        Color = self.Themes[self.Settings.DefaultTheme].Accent,
        Thickness = 1,
        Parent = WindowFrame
    })
    
    -- Window header
    local Header = Create("Frame", {
        Name = "Header",
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background2,
        Parent = WindowFrame
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = Header
    })
    
    -- Header title
    local HeaderTitle = Create("TextLabel", {
        Name = "HeaderTitle",
        Size = UDim2.new(0, 200, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = title or "Stratus UI",
        TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.GothamBold,
        TextSize = 14,
        Parent = Header
    })
    
    -- Close button
    local CloseButton = Create("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 30, 1, 0),
        Position = UDim2.new(1, -30, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
        Text = "Ã—",
        Font = Enum.Font.GothamBold,
        TextSize = 18,
        Parent = Header
    })
    
    -- Minimize button
    local MinimizeButton = Create("TextButton", {
        Name = "MinimizeButton",
        Size = UDim2.new(0, 30, 1, 0),
        Position = UDim2.new(1, -60, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
        Text = "-",
        Font = Enum.Font.GothamBold,
        TextSize = 18,
        Parent = Header
    })
    
    -- Tab container
    local TabContainer = Create("Frame", {
        Name = "TabContainer",
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundTransparency = 1,
        Parent = WindowFrame
    })
    
    local UIListLayout = Create("UIListLayout", {
        FillDirection = Enum.FillDirection.Horizontal,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = TabContainer
    })
    
    -- Content container
    local ContentContainer = Create("ScrollingFrame", {
        Name = "ContentContainer",
        Size = UDim2.new(1, -20, 1, -75),
        Position = UDim2.new(0, 10, 0, 70),
        BackgroundTransparency = 1,
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = self.Themes[self.Settings.DefaultTheme].Accent,
        Parent = WindowFrame
    })
    
    Create("UIPadding", {
        PaddingTop = UDim.new(0, 5),
        PaddingBottom = UDim.new(0, 5),
        Parent = ContentContainer
    })
    
    local ContentLayout = Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = ContentContainer
    })
    
    -- Make window draggable
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function Update(input)
        local delta = input.Position - dragStart
        WindowFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    Header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = WindowFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    Header.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            Update(input)
        end
    end)
    
    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        Tween(WindowFrame, {Size = UDim2.new(0, 450, 0, 0)}, 0.2)
        Tween(WindowFrame, {Position = UDim2.new(0.5, -225, 0.5, -250)}, 0.2)
        wait(0.2)
        MainWindow:Destroy()
    end)
    
    -- Minimize button functionality
    local minimized = false
    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            Tween(WindowFrame, {Size = UDim2.new(0, 450, 0, 30)}, 0.2)
            MinimizeButton.Text = "+"
        else
            Tween(WindowFrame, {Size = UDim2.new(0, 450, 0, 500)}, 0.2)
            MinimizeButton.Text = "-"
        end
    end)
    
    -- Store instances
    self.Instances.MainWindow = MainWindow
    self.Instances.WindowFrame = WindowFrame
    self.Instances.TabContainer = TabContainer
    self.Instances.ContentContainer = ContentContainer
    
    -- Window methods
    local WindowMethods = {}
    
    function WindowMethods:CreateTab(tabName)
        local TabButton = Create("TextButton", {
            Name = tabName .. "Tab",
            Size = UDim2.new(0, 70, 1, 0),
            BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background3,
            Text = tabName,
            TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
            Font = Enum.Font.Gotham,
            TextSize = 12,
            Parent = TabContainer
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 4),
            Parent = TabButton
        })
        
        local TabContent = Create("Frame", {
            Name = tabName .. "Content",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Visible = false,
            Parent = ContentContainer
        })
        
        local TabLayout = Create("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 5),
            Parent = TabContent
        })
        
        -- Select first tab by default
        if #TabContainer:GetChildren() == 2 then -- First tab (1 is UIListLayout)
            TabButton.BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Accent
            TabContent.Visible = true
        end
        
        -- Tab switching logic
        TabButton.MouseButton1Click:Connect(function()
            for _, child in pairs(TabContainer:GetChildren()) do
                if child:IsA("TextButton") then
                    child.BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background3
                end
            end
            
            for _, child in pairs(ContentContainer:GetChildren()) do
                if child:IsA("Frame") then
                    child.Visible = false
                end
            end
            
            TabButton.BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Accent
            TabContent.Visible = true
        end)
        
        -- Tab methods
        local TabMethods = {}
        
        function TabMethods:CreateButton(name, callback)
            local ButtonFrame = Create("Frame", {
                Name = name .. "Button",
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background3,
                Parent = TabContent
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = ButtonFrame
            })
            
            Create("UIStroke", {
                Name = "AccentStroke",
                Color = self.Themes[self.Settings.DefaultTheme].Accent,
                Thickness = 1,
                Parent = ButtonFrame
            })
            
            local Button = Create("TextButton", {
                Name = "Button",
                Size = UDim2.new(1, -10, 1, -10),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
                Font = Enum.Font.Gotham,
                TextSize = 12,
                Parent = ButtonFrame
            })
            
            -- Button hover effects
            Button.MouseEnter:Connect(function()
                Tween(ButtonFrame, {BackgroundColor3 = Color3.fromRGB(
                    self.Themes[self.Settings.DefaultTheme].Background3.R * 255 * 1.2,
                    self.Themes[self.Settings.DefaultTheme].Background3.G * 255 * 1.2,
                    self.Themes[self.Settings.DefaultTheme].Background3.B * 255 * 1.2
                )}, 0.1)
            end)
            
            Button.MouseLeave:Connect(function()
                Tween(ButtonFrame, {BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background3}, 0.1)
            end)
            
            Button.MouseButton1Down:Connect(function()
                Tween(ButtonFrame, {Size = UDim2.new(1, -5, 0, 25)}, 0.1)
            end)
            
            Button.MouseButton1Up:Connect(function()
                Tween(ButtonFrame, {Size = UDim2.new(1, 0, 0, 30)}, 0.1)
                if callback then
                    callback()
                end
            end)
            
            return ButtonFrame
        end
        
        function TabMethods:CreateToggle(name, default, callback)
            local ToggleFrame = Create("Frame", {
                Name = name .. "Toggle",
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background3,
                Parent = TabContent
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = ToggleFrame
            })
            
            Create("UIStroke", {
                Name = "AccentStroke",
                Color = self.Themes[self.Settings.DefaultTheme].Accent,
                Thickness = 1,
                Parent = ToggleFrame
            })
            
            local ToggleLabel = Create("TextLabel", {
                Name = "Label",
                Size = UDim2.new(0.7, -5, 1, -10),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = Enum.Font.Gotham,
                TextSize = 12,
                Parent = ToggleFrame
            })
            
            local ToggleButton = Create("TextButton", {
                Name = "Toggle",
                Size = UDim2.new(0.3, -10, 1, -10),
                Position = UDim2.new(0.7, 5, 0, 5),
                BackgroundColor3 = default and self.Themes[self.Settings.DefaultTheme].Accent or self.Themes[self.Settings.DefaultTheme].Background2,
                Text = "",
                Parent = ToggleFrame
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = ToggleButton
            })
            
            local ToggleState = default or false
            
            local function UpdateToggle()
                if ToggleState then
                    Tween(ToggleButton, {BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Accent}, 0.1)
                else
                    Tween(ToggleButton, {BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background2}, 0.1)
                end
                
                if callback then
                    callback(ToggleState)
                end
            end
            
            ToggleButton.MouseButton1Click:Connect(function()
                ToggleState = not ToggleState
                UpdateToggle()
            end)
            
            -- Initialize
            UpdateToggle()
            
            return {
                Set = function(self, value)
                    ToggleState = value
                    UpdateToggle()
                end,
                Get = function(self)
                    return ToggleState
                end
            }
        end
        
        function TabMethods:CreateSlider(name, min, max, default, callback)
            local SliderFrame = Create("Frame", {
                Name = name .. "Slider",
                Size = UDim2.new(1, 0, 0, 50),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background3,
                Parent = TabContent
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = SliderFrame
            })
            
            Create("UIStroke", {
                Name = "AccentStroke",
                Color = self.Themes[self.Settings.DefaultTheme].Accent,
                Thickness = 1,
                Parent = SliderFrame
            })
            
            local SliderLabel = Create("TextLabel", {
                Name = "Label",
                Size = UDim2.new(1, -10, 0, 15),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = Enum.Font.Gotham,
                TextSize = 12,
                Parent = SliderFrame
            })
            
            local SliderValue = Create("TextLabel", {
                Name = "Value",
                Size = UDim2.new(1, -10, 0, 15),
                Position = UDim2.new(0, 5, 0, 20),
                BackgroundTransparency = 1,
                Text = tostring(default or min),
                TextColor3 = self.Themes[self.Settings.DefaultTheme].Text2,
                TextXAlignment = Enum.TextXAlignment.Right,
                Font = Enum.Font.Gotham,
                TextSize = 12,
                Parent = SliderFrame
            })
            
            local SliderTrack = Create("Frame", {
                Name = "Track",
                Size = UDim2.new(1, -10, 0, 5),
                Position = UDim2.new(0, 5, 0, 40),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background2,
                Parent = SliderFrame
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = SliderTrack
            })
            
            local SliderFill = Create("Frame", {
                Name = "Fill",
                Size = UDim2.new(0, 0, 1, 0),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Accent,
                Parent = SliderTrack
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = SliderFill
            })
            
            local SliderButton = Create("TextButton", {
                Name = "Button",
                Size = UDim2.new(0, 15, 0, 15),
                Position = UDim2.new(0, 0, 0.5, -7.5),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Accent,
                Text = "",
                Parent = SliderTrack
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = SliderButton
            })
            
            local dragging = false
            local currentValue = default or min
            
            local function UpdateSlider(value)
                value = math.clamp(value, min, max)
                currentValue = Round(value, 2)
                
                local percent = (currentValue - min) / (max - min)
                SliderFill.Size = UDim2.new(percent, 0, 1, 0)
                SliderButton.Position = UDim2.new(percent, -7.5, 0.5, -7.5)
                SliderValue.Text = tostring(currentValue)
                
                if callback then
                    callback(currentValue)
                end
            end
            
            SliderButton.MouseButton1Down:Connect(function()
                dragging = true
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            SliderTrack.MouseButton1Down:Connect(function(x)
                local percent = (x - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X
                UpdateSlider(min + (max - min) * percent)
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local percent = (input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X
                    UpdateSlider(min + (max - min) * percent)
                end
            end)
            
            -- Initialize
            UpdateSlider(default or min)
            
            return {
                Set = function(self, value)
                    UpdateSlider(value)
                end,
                Get = function(self)
                    return currentValue
                end
            }
        end
        
        function TabMethods:CreateDropdown(name, options, default, callback)
            local DropdownFrame = Create("Frame", {
                Name = name .. "Dropdown",
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background3,
                Parent = TabContent
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = DropdownFrame
            })
            
            Create("UIStroke", {
                Name = "AccentStroke",
                Color = self.Themes[self.Settings.DefaultTheme].Accent,
                Thickness = 1,
                Parent = DropdownFrame
            })
            
            local DropdownLabel = Create("TextLabel", {
                Name = "Label",
                Size = UDim2.new(0.7, -5, 1, -10),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = Enum.Font.Gotham,
                TextSize = 12,
                Parent = DropdownFrame
            })
            
            local DropdownButton = Create("TextButton", {
                Name = "Button",
                Size = UDim2.new(0.3, -10, 1, -10),
                Position = UDim2.new(0.7, 5, 0, 5),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background2,
                Text = options[1] or "",
                TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
                Font = Enum.Font.Gotham,
                TextSize = 12,
                Parent = DropdownFrame
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = DropdownButton
            })
            
            local DropdownList = Create("ScrollingFrame", {
                Name = "List",
                Size = UDim2.new(0.3, -10, 0, 100),
                Position = UDim2.new(0.7, 5, 0, 35),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background2,
                Visible = false,
                ScrollBarThickness = 3,
                ScrollBarImageColor3 = self.Themes[self.Settings.DefaultTheme].Accent,
                Parent = DropdownFrame
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = DropdownList
            })
            
            Create("UIStroke", {
                Name = "AccentStroke",
                Color = self.Themes[self.Settings.DefaultTheme].Accent,
                Thickness = 1,
                Parent = DropdownList
            })
            
            local DropdownLayout = Create("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Parent = DropdownList
            })
            
            local DropdownPadding = Create("UIPadding", {
                PaddingTop = UDim.new(0, 5),
                PaddingBottom = UDim.new(0, 5),
                Parent = DropdownList
            })
            
            local isOpen = false
            local selectedOption = options[1] or ""
            
            local function UpdateDropdown()
                DropdownButton.Text = selectedOption
                if callback then
                    callback(selectedOption)
                end
            end
            
            local function ToggleDropdown()
                isOpen = not isOpen
                DropdownList.Visible = isOpen
                
                if isOpen then
                    Tween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 140)}, 0.2)
                else
                    Tween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 30)}, 0.2)
                end
            end
            
            -- Populate dropdown options
            for i, option in ipairs(options) do
                local OptionButton = Create("TextButton", {
                    Name = option .. "Option",
                    Size = UDim2.new(1, -10, 0, 20),
                    Position = UDim2.new(0, 5, 0, 5 + (i-1)*25),
                    BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background3,
                    Text = option,
                    TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
                    Font = Enum.Font.Gotham,
                    TextSize = 12,
                    Parent = DropdownList
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = OptionButton
                })
                
                OptionButton.MouseButton1Click:Connect(function()
                    selectedOption = option
                    UpdateDropdown()
                    ToggleDropdown()
                end)
            end
            
            DropdownButton.MouseButton1Click:Connect(ToggleDropdown)
            
            -- Close dropdown when clicking outside
            UserInputService.InputBegan:Connect(function(input)
                if isOpen and input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if not IsMouseOverFrame(DropdownFrame) then
                        ToggleDropdown()
                    end
                end
            end)
            
            -- Initialize
            if default then
                for _, option in ipairs(options) do
                    if option == default then
                        selectedOption = option
                        break
                    end
                end
                UpdateDropdown()
            end
            
            return {
                Set = function(self, value)
                    for _, option in ipairs(options) do
                        if option == value then
                            selectedOption = option
                            UpdateDropdown()
                            break
                        end
                    end
                end,
                Get = function(self)
                    return selectedOption
                end,
                Refresh = function(self, newOptions)
                    options = newOptions
                    selectedOption = options[1] or ""
                    
                    -- Clear existing options
                    for _, child in ipairs(DropdownList:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    
                    -- Add new options
                    for i, option in ipairs(options) do
                        local OptionButton = Create("TextButton", {
                            Name = option .. "Option",
                            Size = UDim2.new(1, -10, 0, 20),
                            Position = UDim2.new(0, 5, 0, 5 + (i-1)*25),
                            BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background3,
                            Text = option,
                            TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
                            Font = Enum.Font.Gotham,
                            TextSize = 12,
                            Parent = DropdownList
                        })
                        
                        Create("UICorner", {
                            CornerRadius = UDim.new(0, 4),
                            Parent = OptionButton
                        })
                        
                        OptionButton.MouseButton1Click:Connect(function()
                            selectedOption = option
                            UpdateDropdown()
                            ToggleDropdown()
                        end)
                    end
                    
                    UpdateDropdown()
                end
            }
        end
        
        function TabMethods:CreateLabel(text)
            local LabelFrame = Create("Frame", {
                Name = "LabelFrame",
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                Parent = TabContent
            })
            
            local Label = Create("TextLabel", {
                Name = "Label",
                Size = UDim2.new(1, -10, 1, 0),
                Position = UDim2.new(0, 5, 0, 0),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = Enum.Font.Gotham,
                TextSize = 12,
                Parent = LabelFrame
            })
            
            return Label
        end
        
        function TabMethods:CreateTextbox(placeholder, callback)
            local TextboxFrame = Create("Frame", {
                Name = "TextboxFrame",
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background3,
                Parent = TabContent
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = TextboxFrame
            })
            
            Create("UIStroke", {
                Name = "AccentStroke",
                Color = self.Themes[self.Settings.DefaultTheme].Accent,
                Thickness = 1,
                Parent = TextboxFrame
            })
            
            local Textbox = Create("TextBox", {
                Name = "Textbox",
                Size = UDim2.new(1, -10, 1, -10),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundTransparency = 1,
                PlaceholderText = placeholder,
                Text = "",
                TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
                Font = Enum.Font.Gotham,
                TextSize = 12,
                Parent = TextboxFrame
            })
            
            Textbox.FocusLost:Connect(function(enterPressed)
                if enterPressed and callback then
                    callback(Textbox.Text)
                end
            end)
            
            return Textbox
        end
        
        function TabMethods:CreateKeybind(name, defaultKey, callback)
            local KeybindFrame = Create("Frame", {
                Name = name .. "Keybind",
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background3,
                Parent = TabContent
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = KeybindFrame
            })
            
            Create("UIStroke", {
                Name = "AccentStroke",
                Color = self.Themes[self.Settings.DefaultTheme].Accent,
                Thickness = 1,
                Parent = KeybindFrame
            })
            
            local KeybindLabel = Create("TextLabel", {
                Name = "Label",
                Size = UDim2.new(0.7, -5, 1, -10),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = Enum.Font.Gotham,
                TextSize = 12,
                Parent = KeybindFrame
            })
            
            local KeybindButton = Create("TextButton", {
                Name = "Button",
                Size = UDim2.new(0.3, -10, 1, -10),
                Position = UDim2.new(0.7, 5, 0, 5),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background2,
                Text = defaultKey and tostring(defaultKey) or "NONE",
                TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
                Font = Enum.Font.Gotham,
                TextSize = 12,
                Parent = KeybindFrame
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = KeybindButton
            })
            
            local listening = false
            local currentKey = defaultKey
            
            local function UpdateKeybind()
                KeybindButton.Text = currentKey and tostring(currentKey) or "NONE"
                if callback then
                    callback(currentKey)
                end
            end
            
            KeybindButton.MouseButton1Click:Connect(function()
                listening = true
                KeybindButton.Text = "..."
                KeybindButton.BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Accent
            end)
            
            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if listening and not gameProcessed then
                    if input.UserInputType == Enum.UserInputType.Keyboard then
                        currentKey = input.KeyCode
                    elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
                        currentKey = Enum.UserInputType.MouseButton1
                    elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
                        currentKey = Enum.UserInputType.MouseButton2
                    elseif input.UserInputType == Enum.UserInputType.MouseButton3 then
                        currentKey = Enum.UserInputType.MouseButton3
                    end
                    
                    listening = false
                    KeybindButton.BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background2
                    UpdateKeybind()
                end
            end)
            
            -- Initialize
            UpdateKeybind()
            
            return {
                Set = function(self, key)
                    currentKey = key
                    UpdateKeybind()
                end,
                Get = function(self)
                    return currentKey
                end
            }
        end
        
        function TabMethods:CreateColorPicker(name, defaultColor, callback)
            local ColorPickerFrame = Create("Frame", {
                Name = name .. "ColorPicker",
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background3,
                Parent = TabContent
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = ColorPickerFrame
            })
            
            Create("UIStroke", {
                Name = "AccentStroke",
                Color = self.Themes[self.Settings.DefaultTheme].Accent,
                Thickness = 1,
                Parent = ColorPickerFrame
            })
            
            local ColorPickerLabel = Create("TextLabel", {
                Name = "Label",
                Size = UDim2.new(0.7, -5, 1, -10),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = Enum.Font.Gotham,
                TextSize = 12,
                Parent = ColorPickerFrame
            })
            
            local ColorPickerButton = Create("TextButton", {
                Name = "Button",
                Size = UDim2.new(0.3, -10, 1, -10),
                Position = UDim2.new(0.7, 5, 0, 5),
                BackgroundColor3 = defaultColor or self.Themes[self.Settings.DefaultTheme].Accent,
                Text = "",
                Parent = ColorPickerFrame
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = ColorPickerButton
            })
            
            local ColorPickerPopup = Create("Frame", {
                Name = "Popup",
                Size = UDim2.new(0, 200, 0, 200),
                Position = UDim2.new(1, 5, 0, 0),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background2,
                Visible = false,
                Parent = ColorPickerFrame
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = ColorPickerPopup
            })
            
            Create("UIStroke", {
                Name = "AccentStroke",
                Color = self.Themes[self.Settings.DefaultTheme].Accent,
                Thickness = 1,
                Parent = ColorPickerPopup
            })
            
            local ColorPickerCanvas = Create("ImageLabel", {
                Name = "Canvas",
                Size = UDim2.new(1, -60, 1, -30),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Image = "rbxassetid://9427935361", -- Color wheel image
                Parent = ColorPickerPopup
            })
            
            local ColorPickerHue = Create("ImageLabel", {
                Name = "Hue",
                Size = UDim2.new(0, 50, 1, -30),
                Position = UDim2.new(1, -55, 0, 5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Image = "rbxassetid://9427935889", -- Hue gradient image
                Parent = ColorPickerPopup
            })
            
            local ColorPickerSelector = Create("Frame", {
                Name = "Selector",
                Size = UDim2.new(0, 10, 0, 10),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BackgroundTransparency = 1,
                Parent = ColorPickerCanvas
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = ColorPickerSelector
            })
            
            Create("UIStroke", {
                Color = Color3.fromRGB(0, 0, 0),
                Thickness = 2,
                Parent = ColorPickerSelector
            })
            
            local HueSelector = Create("Frame", {
                Name = "HueSelector",
                Size = UDim2.new(1, 0, 0, 5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = ColorPickerHue
            })
            
            Create("UIStroke", {
                Color = Color3.fromRGB(0, 0, 0),
                Thickness = 1,
                Parent = HueSelector
            })
            
            local ColorPickerPreview = Create("Frame", {
                Name = "Preview",
                Size = UDim2.new(1, -10, 0, 20),
                Position = UDim2.new(0, 5, 1, -25),
                BackgroundColor3 = defaultColor or self.Themes[self.Settings.DefaultTheme].Accent,
                Parent = ColorPickerPopup
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = ColorPickerPreview
            })
            
            local currentColor = defaultColor or self.Themes[self.Settings.DefaultTheme].Accent
            local hue = 0
            local sat = 1
            local val = 1
            local isOpen = false
            
            local function HSVToRGB(h, s, v)
                local r, g, b
                
                local i = math.floor(h * 6)
                local f = h * 6 - i
                local p = v * (1 - s)
                local q = v * (1 - f * s)
                local t = v * (1 - (1 - f) * s)
                
                i = i % 6
                
                if i == 0 then
                    r, g, b = v, t, p
                elseif i == 1 then
                    r, g, b = q, v, p
                elseif i == 2 then
                    r, g, b = p, v, t
                elseif i == 3 then
                    r, g, b = p, q, v
                elseif i == 4 then
                    r, g, b = t, p, v
                elseif i == 5 then
                    r, g, b = v, p, q
                end
                
                return Color3.new(r, g, b)
            end
            
            local function RGBToHSV(r, g, b)
                local max = math.max(r, g, b)
                local min = math.min(r, g, b)
                local h, s, v
                
                v = max
                
                local d = max - min
                if max == 0 then
                    s = 0
                else
                    s = d / max
                end
                
                if max == min then
                    h = 0
                else
                    if max == r then
                        h = (g - b) / d
                        if g < b then
                            h = h + 6
                        end
                    elseif max == g then
                        h = (b - r) / d + 2
                    elseif max == b then
                        h = (r - g) / d + 4
                    end
                    h = h / 6
                end
                
                return h, s, v
            end
            
            local function UpdateColor()
                currentColor = HSVToRGB(hue, sat, val)
                ColorPickerButton.BackgroundColor3 = currentColor
                ColorPickerPreview.BackgroundColor3 = currentColor
                
                if callback then
                    callback(currentColor)
                end
            end
            
            local function UpdateSelectors()
                ColorPickerSelector.Position = UDim2.new(0, sat * ColorPickerCanvas.AbsoluteSize.X - 5, 0, (1 - val) * ColorPickerCanvas.AbsoluteSize.Y - 5)
                HueSelector.Position = UDim2.new(0, 0, 0, hue * ColorPickerHue.AbsoluteSize.Y - 2.5)
            end
            
            local function SetColorFromCanvas(x, y)
                sat = math.clamp(x / ColorPickerCanvas.AbsoluteSize.X, 0, 1)
                val = 1 - math.clamp(y / ColorPickerCanvas.AbsoluteSize.Y, 0, 1)
                UpdateColor()
                UpdateSelectors()
            end
            
            local function SetHueFromSlider(y)
                hue = math.clamp(y / ColorPickerHue.AbsoluteSize.Y, 0, 1)
                UpdateColor()
                UpdateSelectors()
            end
            
            ColorPickerCanvas.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    SetColorFromCanvas(input.Position.X - ColorPickerCanvas.AbsolutePosition.X, input.Position.Y - ColorPickerCanvas.AbsolutePosition.Y)
                    
                    local connection
                    connection = input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            connection:Disconnect()
                        else
                            SetColorFromCanvas(input.Position.X - ColorPickerCanvas.AbsolutePosition.X, input.Position.Y - ColorPickerCanvas.AbsolutePosition.Y)
                        end
                    end)
                end
            end)
            
            ColorPickerHue.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    SetHueFromSlider(input.Position.Y - ColorPickerHue.AbsolutePosition.Y)
                    
                    local connection
                    connection = input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            connection:Disconnect()
                        else
                            SetHueFromSlider(input.Position.Y - ColorPickerHue.AbsolutePosition.Y)
                        end
                    end)
                end
            end)
            
            ColorPickerButton.MouseButton1Click:Connect(function()
                isOpen = not isOpen
                ColorPickerPopup.Visible = isOpen
                
                if isOpen then
                    Tween(ColorPickerFrame, {Size = UDim2.new(1, 0, 0, 240)}, 0.2)
                else
                    Tween(ColorPickerFrame, {Size = UDim2.new(1, 0, 0, 30)}, 0.2)
                end
            end)
            
            -- Close color picker when clicking outside
            UserInputService.InputBegan:Connect(function(input)
                if isOpen and input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if not IsMouseOverFrame(ColorPickerFrame) then
                        isOpen = false
                        ColorPickerPopup.Visible = false
                        Tween(ColorPickerFrame, {Size = UDim2.new(1, 0, 0, 30)}, 0.2)
                    end
                end
            end)
            
            -- Initialize
            if defaultColor then
                hue, sat, val = RGBToHSV(defaultColor.r, defaultColor.g, defaultColor.b)
            end
            UpdateColor()
            UpdateSelectors()
            
            return {
                Set = function(self, color)
                    currentColor = color
                    hue, sat, val = RGBToHSV(color.r, color.g, color.b)
                    UpdateColor()
                    UpdateSelectors()
                end,
                Get = function(self)
                    return currentColor
                end
            }
        end
        
        function TabMethods:CreateProgressBar(name, initialPercent)
            local ProgressBarFrame = Create("Frame", {
                Name = name .. "ProgressBar",
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background3,
                Parent = TabContent
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = ProgressBarFrame
            })
            
            Create("UIStroke", {
                Name = "AccentStroke",
                Color = self.Themes[self.Settings.DefaultTheme].Accent,
                Thickness = 1,
                Parent = ProgressBarFrame
            })
            
            local ProgressBarLabel = Create("TextLabel", {
                Name = "Label",
                Size = UDim2.new(0.7, -5, 1, -10),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = Enum.Font.Gotham,
                TextSize = 12,
                Parent = ProgressBarFrame
            })
            
            local ProgressBarTrack = Create("Frame", {
                Name = "Track",
                Size = UDim2.new(0.3, -10, 0, 10),
                Position = UDim2.new(0.7, 5, 0.5, -5),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background2,
                Parent = ProgressBarFrame
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = ProgressBarTrack
            })
            
            local ProgressBarFill = Create("Frame", {
                Name = "Fill",
                Size = UDim2.new(0, 0, 1, 0),
                BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Accent,
                Parent = ProgressBarTrack
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = ProgressBarFill
            })
            
            local ProgressBarText = Create("TextLabel", {
                Name = "Text",
                Size = UDim2.new(0.3, -10, 1, -10),
                Position = UDim2.new(0.7, 5, 0, 5),
                BackgroundTransparency = 1,
                Text = "0%",
                TextColor3 = self.Themes[self.Settings.DefaultTheme].Text2,
                TextXAlignment = Enum.TextXAlignment.Right,
                Font = Enum.Font.Gotham,
                TextSize = 12,
                Parent = ProgressBarFrame
            })
            
            local function SetProgress(percent)
                percent = math.clamp(percent, 0, 100)
                ProgressBarFill.Size = UDim2.new(percent / 100, 0, 1, 0)
                ProgressBarText.Text = math.floor(percent) .. "%"
            end
            
            -- Initialize
            SetProgress(initialPercent or 0)
            
            return {
                Set = function(self, percent)
                    SetProgress(percent)
                end,
                Get = function(self)
                    return tonumber(ProgressBarText.Text:gsub("%%", ""))
                end
            }
        end
        
        return TabMethods
    end
    
    return WindowMethods
end

-- Notification system
function Stratus:Notify(title, text, duration)
    duration = duration or 5
    
    if not self.Instances.NotificationHolder then
        self.Instances.NotificationHolder = Create("ScreenGui", {
            Name = "NotificationHolder",
            ResetOnSpawn = false,
            ZIndexBehavior = Enum.ZIndexBehavior.Global,
            Parent = game:GetService("CoreGui")
        })
    end
    
    local Notification = Create("Frame", {
        Name = "Notification",
        Size = UDim2.new(0, 300, 0, 80),
        Position = UDim2.new(1, -320, 1, -100),
        BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Background2,
        Parent = self.Instances.NotificationHolder
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = Notification
    })
    
    Create("UIStroke", {
        Color = self.Themes[self.Settings.DefaultTheme].Accent,
        Thickness = 1,
        Parent = Notification
    })
    
    local Title = Create("TextLabel", {
        Name = "Title",
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        Text = title,
        TextColor3 = self.Themes[self.Settings.DefaultTheme].Text,
        Font = Enum.Font.GothamBold,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Notification
    })
    
    local Content = Create("TextLabel", {
        Name = "Content",
        Size = UDim2.new(1, -20, 1, -40),
        Position = UDim2.new(0, 10, 0, 30),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = self.Themes[self.Settings.DefaultTheme].Text2,
        Font = Enum.Font.Gotham,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        Parent = Notification
    })
    
    local ProgressBar = Create("Frame", {
        Name = "ProgressBar",
        Size = UDim2.new(1, 0, 0, 2),
        Position = UDim2.new(0, 0, 1, -2),
        BackgroundColor3 = self.Themes[self.Settings.DefaultTheme].Accent,
        Parent = Notification
    })
    
    -- Animation
    Notification.Position = UDim2.new(1, 320, 1, -100)
    Tween(Notification, {Position = UDim2.new(1, -320, 1, -100)}, 0.3)
    
    -- Progress bar animation
    spawn(function()
        local startTime = tick()
        while tick() - startTime < duration do
            local elapsed = tick() - startTime
            local percent = elapsed / duration
            ProgressBar.Size = UDim2.new(1 - percent, 0, 0, 2)
            wait()
        end
        
        Tween(Notification, {Position = UDim2.new(1, 320, 1, -100)}, 0.3)
        wait(0.3)
        Notification:Destroy()
    end)
    
    -- Click to dismiss
    Notification.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Tween(Notification, {Position = UDim2.new(1, 320, 1, -100)}, 0.3)
            wait(0.3)
            Notification:Destroy()
        end
    end)
end

-- Demo script
if not getgenv().StratusNoDemo then
    spawn(function()
        wait(1)
        
        local win = Stratus:CreateWindow("Stratus UI Demo")
        local main = win:CreateTab("Main")
        local settings = win:CreateTab("Settings")
        local credits = win:CreateTab("Credits")
        
        -- Main tab
        local speed = 16
        local toggle = main:CreateToggle("Speed Hack", false, function(state)
            if state then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speed
            else
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
            end
        end)
        
        main:CreateSlider(16, 100, 16, function(val)
            speed = val
            if toggle:Get() then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speed
            end
        end)
        
        main:CreateButton("Test Notification", function()
            Stratus:Notify("Test", "This is a notification from Stratus UI!", 3)
        end)
        
        local dropdown = main:CreateDropdown("Options", {"Option 1", "Option 2", "Option 3"}, "Option 1", function(option)
            Stratus:Notify("Dropdown", "Selected: " .. option, 2)
        end)
        
        main:CreateTextbox("Enter text", function(text)
            Stratus:Notify("Textbox", "You entered: " .. text, 2)
        end)
        
        -- Settings tab
        settings:CreateLabel("UI Settings")
        
        settings:CreateDropdown("Theme", {"NeonBlue", "Aqua", "PurpleGlow"}, Stratus.Settings.DefaultTheme, function(theme)
            Stratus:SetTheme(theme)
        end)
        
        local colorPicker = settings:CreateColorPicker("Accent Color", Stratus.Themes[Stratus.Settings.DefaultTheme].Accent, function(color)
            Stratus:SetTheme({
                Background = Stratus.Themes[Stratus.Settings.DefaultTheme].Background,
                Background2 = Stratus.Themes[Stratus.Settings.DefaultTheme].Background2,
                Background3 = Stratus.Themes[Stratus.Settings.DefaultTheme].Background3,
                Accent = color,
                Accent2 = Color3.new(color.r * 0.8, color.g * 0.8, color.b * 0.8),
                Text = Stratus.Themes[Stratus.Settings.DefaultTheme].Text,
                Text2 = Stratus.Themes[Stratus.Settings.DefaultTheme].Text2,
                Shadow = Stratus.Themes[Stratus.Settings.DefaultTheme].Shadow,
                ShadowTransparency = Stratus.Themes[Stratus.Settings.DefaultTheme].ShadowTransparency
            })
        end)
        
        settings:CreateToggle("Enable Animations", Stratus.Settings.EnableAnimations, function(state)
            Stratus.Settings.EnableAnimations = state
        end)
        
        -- Credits tab
        credits:CreateLabel("Stratus UI v1.0")
        credits:CreateLabel("Created by Joey")
        credits:CreateLabel("For Synapse X, Fluxus, etc.")
        
        credits:CreateButton("Close UI", function()
            win:Destroy()
        end)
    end)
end

return Stratus
