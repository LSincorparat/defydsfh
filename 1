-- Stratus v2.0
-- A next-generation Roblox GUI library with futuristic design
-- Optimized for Synapse X, Fluxus, and other executors

if not getgenv().StratusSettings then
    getgenv().StratusSettings = {
        Theme = {
            Main = Color3.fromRGB(15, 15, 20),
            Secondary = Color3.fromRGB(25, 25, 30),
            Text = Color3.fromRGB(240, 240, 240),
            Accent = Color3.fromRGB(0, 150, 255),
            DarkAccent = Color3.fromRGB(0, 120, 200),
            Outline = Color3.fromRGB(40, 40, 45),
            Notification = Color3.fromRGB(20, 20, 25),
            Success = Color3.fromRGB(0, 200, 100),
            Warning = Color3.fromRGB(255, 150, 0),
            Error = Color3.fromRGB(255, 50, 50)
        },
        Config = {
            Font = Enum.Font.Gotham,
            FontBold = Enum.Font.GothamBold,
            AnimationSpeed = 0.15
        }
    }
end

local Stratus = {}
Stratus.__index = Stratus

-- Animation Service with executor fallback
local TweenService = {
    Create = function(instance, info, props)
        if game:GetService("TweenService") then
            local tween = game:GetService("TweenService"):Create(instance, info, props)
            tween:Play()
            return tween
        else
            -- Fallback for executors without TweenService
            for prop, value in pairs(props) do
                instance[prop] = value
            end
            return { Play = function() end }
        end
    end
}

-- Utility function for creating instances
local function Create(class, props)
    local instance = Instance.new(class)
    for prop, value in pairs(props) do
        if prop == "Children" then
            for _, child in ipairs(value) do
                child.Parent = instance
            end
        else
            instance[prop] = value
        end
    end
    return instance
end

-- Ripple effect for buttons
local function RippleEffect(button, position)
    local ripple = Create("Frame", {
        Name = "Ripple",
        BackgroundColor3 = Color3.new(1, 1, 1),
        BackgroundTransparency = 0.9,
        Size = UDim2.new(0, 0, 0, 0),
        Position = position or UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        ZIndex = 10,
        Children = {
            Create("UICorner", { CornerRadius = UDim.new(1, 0) })
        }
    })
    
    ripple.Parent = button
    TweenService.Create(ripple, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        Size = UDim2.new(2, 0, 2, 0),
        BackgroundTransparency = 1
    })
    
    spawn(function()
        wait(0.5)
        ripple:Destroy()
    end)
end

-- Set theme colors
function Stratus:SetTheme(themeTable)
    for k, v in pairs(themeTable) do
        if getgenv().StratusSettings.Theme[k] then
            getgenv().StratusSettings.Theme[k] = v
        end
    end
    -- TODO: Update existing UI elements with new theme
end

-- Create main window
function Stratus:CreateWindow(title)
    local theme = getgenv().StratusSettings.Theme
    local config = getgenv().StratusSettings.Config
    
    -- Create ScreenGui
    local screenGui = Create("ScreenGui", {
        Name = "StratusUI",
        ResetOnSpawn = false
    })
    
    -- Handle different executor environments
    if gethui then
        screenGui.Parent = gethui()
    elseif syn and syn.protect_gui then
        syn.protect_gui(screenGui)
        screenGui.Parent = game:GetService("CoreGui")
    else
        screenGui.Parent = game:GetService("CoreGui")
    end
    
    -- Main window frame
    local mainWindow = Create("Frame", {
        Name = "MainWindow",
        Size = UDim2.new(0, 500, 0, 400),
        Position = UDim2.new(0.5, -250, 0.5, -200),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = theme.Main,
        BorderSizePixel = 0,
        ClipsDescendants = true,
        Children = {
            Create("UICorner", { CornerRadius = UDim.new(0, 8) }),
            Create("UIStroke", {
                Color = theme.Outline,
                Thickness = 1,
                Transparency = 0.5
            }),
            Create("Frame", {
                Name = "TopBar",
                Size = UDim2.new(1, 0, 0, 40),
                BackgroundColor3 = theme.Secondary,
                BorderSizePixel = 0,
                Children = {
                    Create("UICorner", { 
                        CornerRadius = UDim.new(0, 8),
                        Name = "TopBarCorner"
                    }),
                    Create("TextLabel", {
                        Name = "Title",
                        Text = title,
                        TextColor3 = theme.Text,
                        TextSize = 18,
                        Font = config.FontBold,
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 15, 0, 0),
                        Size = UDim2.new(0, 200, 1, 0),
                        TextXAlignment = Enum.TextXAlignment.Left
                    }),
                    Create("Frame", {
                        Name = "AccentBar",
                        Size = UDim2.new(1, 0, 0, 2),
                        Position = UDim2.new(0, 0, 1, -2),
                        AnchorPoint = Vector2.new(0, 1),
                        BackgroundColor3 = theme.Accent,
                        BorderSizePixel = 0
                    })
                }
            }),
            Create("Frame", {
                Name = "TabContainer",
                Position = UDim2.new(0, 10, 0, 50),
                Size = UDim2.new(0, 120, 1, -60),
                BackgroundTransparency = 1,
                Children = {
                    Create("UIListLayout", {
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        Padding = UDim.new(0, 5)
                    })
                }
            }),
            Create("Frame", {
                Name = "ContentContainer",
                Position = UDim2.new(0, 140, 0, 50),
                Size = UDim2.new(1, -150, 1, -60),
                BackgroundTransparency = 1,
                Children = {
                    Create("UIListLayout", {
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        Padding = UDim.new(0, 12)
                    }),
                    Create("UIPadding", {
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5)
                    })
                }
            }),
            Create("TextLabel", {
                Name = "Watermark",
                Text = "Stratus v2.0",
                TextColor3 = Color3.fromRGB(100, 100, 100),
                TextSize = 12,
                Font = config.Font,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -100, 1, -20),
                Size = UDim2.new(0, 90, 0, 15),
                TextXAlignment = Enum.TextXAlignment.Right
            })
        }
    })
    
    mainWindow.Parent = screenGui
    
    -- Draggable functionality
    local dragging, dragInput, dragStart, startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        mainWindow.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end
    
    mainWindow.TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainWindow.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    mainWindow.TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
    
    local window = {
        ScreenGui = screenGui,
        Tabs = {},
        CurrentTab = nil
    }
    
    setmetatable(window, Stratus)
    
    -- Create tab method
    function window:CreateTab(name)
        local theme = getgenv().StratusSettings.Theme
        local config = getgenv().StratusSettings.Config
        
        -- Tab button
        local tabButton = Create("TextButton", {
            Name = name,
            Text = name,
            TextColor3 = theme.Text,
            TextSize = 14,
            Font = config.Font,
            BackgroundColor3 = theme.Secondary,
            Size = UDim2.new(1, -10, 0, 32),
            BorderSizePixel = 0,
            AutoButtonColor = false,
            Children = {
                Create("UICorner", { CornerRadius = UDim.new(0, 6) }),
                Create("UIStroke", {
                    Color = theme.Outline,
                    Thickness = 1
                })
            }
        })
        
        tabButton.Parent = mainWindow.TabContainer
        
        -- Tab content
        local tabContent = Create("ScrollingFrame", {
            Name = name,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            ScrollBarThickness = 3,
            ScrollBarImageColor3 = theme.Accent,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            Visible = false,
            Children = {
                Create("UIListLayout", {
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 12)
                })
            }
        })
        
        tabContent.Parent = mainWindow.ContentContainer
        
        local tab = {
            Name = name,
            TabButton = tabButton,
            TabContent = tabContent,
            Elements = {},
            Parent = window
        }
        
        table.insert(window.Tabs, tab)
        
        -- Switch to this tab if it's the first one
        if #window.Tabs == 1 then
            window:SwitchTab(tab)
        end
        
        -- Tab button click handler
        tabButton.MouseButton1Click:Connect(function()
            window:SwitchTab(tab)
        end)
        
        -- Button hover effects
        tabButton.MouseEnter:Connect(function()
            TweenService.Create(tabButton, TweenInfo.new(config.AnimationSpeed), {
                BackgroundColor3 = Color3.new(
                    theme.Secondary.R * 1.1,
                    theme.Secondary.G * 1.1,
                    theme.Secondary.B * 1.1
                )
            })
        end)
        
        tabButton.MouseLeave:Connect(function()
            if window.CurrentTab ~= tab then
                TweenService.Create(tabButton, TweenInfo.new(config.AnimationSpeed), {
                    BackgroundColor3 = theme.Secondary
                })
            end
        end)
        
        -- Create label element
        function tab:CreateLabel(text)
            local label = Create("TextLabel", {
                Text = text,
                TextColor3 = theme.Text,
                TextSize = 14,
                Font = config.Font,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 20),
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            label.Parent = tabContent
            table.insert(tab.Elements, label)
            
            -- Update canvas size
            tabContent.CanvasSize = UDim2.new(0, 0, 0, tabContent.UIListLayout.AbsoluteContentSize.Y)
            
            return label
        end
        
        -- Create button element
        function tab:CreateButton(text, callback)
            local button = Create("TextButton", {
                Text = text,
                TextColor3 = theme.Text,
                TextSize = 14,
                Font = config.Font,
                BackgroundColor3 = theme.Secondary,
                Size = UDim2.new(1, -10, 0, 36),
                BorderSizePixel = 0,
                AutoButtonColor = false,
                Children = {
                    Create("UICorner", { CornerRadius = UDim.new(0, 6) }),
                    Create("UIStroke", {
                        Color = theme.Outline,
                        Thickness = 1
                    })
                }
            })
            
            button.Parent = tabContent
            table.insert(tab.Elements, button)
            
            -- Button hover effects
            button.MouseEnter:Connect(function()
                TweenService.Create(button, TweenInfo.new(config.AnimationSpeed), {
                    BackgroundColor3 = Color3.new(
                        theme.Secondary.R * 1.1,
                        theme.Secondary.G * 1.1,
                        theme.Secondary.B * 1.1
                    )
                })
            end)
            
            button.MouseLeave:Connect(function()
                TweenService.Create(button, TweenInfo.new(config.AnimationSpeed), {
                    BackgroundColor3 = theme.Secondary
                })
            end)
            
            -- Button click effects
            button.MouseButton1Down:Connect(function()
                TweenService.Create(button, TweenInfo.new(config.AnimationSpeed/2), {
                    BackgroundColor3 = theme.DarkAccent
                })
            end)
            
            button.MouseButton1Up:Connect(function()
                TweenService.Create(button, TweenInfo.new(config.AnimationSpeed), {
                    BackgroundColor3 = theme.Secondary
                })
                
                -- Get relative click position for ripple effect
                local mouse = game:GetService("UserInputService"):GetMouseLocation()
                local buttonPos = button.AbsolutePosition
                local buttonSize = button.AbsoluteSize
                local relativeX = (mouse.X - buttonPos.X) / buttonSize.X
                local relativeY = (mouse.Y - buttonPos.Y) / buttonSize.Y
                
                RippleEffect(button, UDim2.new(relativeX, 0, relativeY, 0))
                callback()
            end)
            
            -- Update canvas size
            tabContent.CanvasSize = UDim2.new(0, 0, 0, tabContent.UIListLayout.AbsoluteContentSize.Y)
            
            return button
        end
        
        -- Create toggle element
        function tab:CreateToggle(text, default, callback)
            local toggled = default or false
            
            local toggleFrame = Create("Frame", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 30),
                Children = {
                    Create("TextLabel", {
                        Text = text,
                        TextColor3 = theme.Text,
                        TextSize = 14,
                        Font = config.Font,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(0.7, 0, 1, 0),
                        TextXAlignment = Enum.TextXAlignment.Left
                    }),
                    Create("TextButton", {
                        Name = "ToggleButton",
                        Text = "",
                        BackgroundColor3 = toggled and theme.Accent or theme.Secondary,
                        Size = UDim2.new(0, 50, 0, 25),
                        Position = UDim2.new(1, -50, 0.5, -12.5),
                        AnchorPoint = Vector2.new(1, 0.5),
                        AutoButtonColor = false,
                        Children = {
                            Create("UICorner", { CornerRadius = UDim.new(1, 0) }),
                            Create("Frame", {
                                Name = "ToggleCircle",
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                Size = UDim2.new(0, 21, 0, 21),
                                Position = UDim2.new(0, toggled and 27 or 2, 0.5, -10.5),
                                AnchorPoint = Vector2.new(0, 0.5),
                                Children = {
                                    Create("UICorner", { CornerRadius = UDim.new(1, 0) })
                                }
                            }),
                            Create("UIStroke", {
                                Color = theme.Outline,
                                Thickness = 1
                            })
                        }
                    })
                }
            })
            
            toggleFrame.Parent = tabContent
            table.insert(tab.Elements, toggleFrame)
            
            local toggleButton = toggleFrame.ToggleButton
            local toggleCircle = toggleButton.ToggleCircle
            
            local function updateToggle()
                TweenService.Create(toggleButton, TweenInfo.new(config.AnimationSpeed), {
                    BackgroundColor3 = toggled and theme.Accent or theme.Secondary
                })
                
                TweenService.Create(toggleCircle, TweenInfo.new(config.AnimationSpeed), {
                    Position = UDim2.new(0, toggled and 27 or 2, 0.5, -10.5)
                })
                
                callback(toggled)
            end
            
            toggleButton.MouseButton1Click:Connect(function()
                toggled = not toggled
                updateToggle()
            end)
            
            -- Update canvas size
            tabContent.CanvasSize = UDim2.new(0, 0, 0, tabContent.UIListLayout.AbsoluteContentSize.Y)
            
            local toggle = {
                Value = toggled,
                Set = function(self, value)
                    toggled = value
                    updateToggle()
                end
            }
            
            return toggle
        end
        
        -- Create slider element
        function tab:CreateSlider(min, max, default, callback)
            local value = math.clamp(default or min, min, max)
            
            local sliderFrame = Create("Frame", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 50),
                Children = {
                    Create("TextLabel", {
                        Name = "SliderText",
                        Text = tostring(value),
                        TextColor3 = theme.Text,
                        TextSize = 14,
                        Font = config.Font,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, 0, 0, 20),
                        TextXAlignment = Enum.TextXAlignment.Right
                    }),
                    Create("Frame", {
                        Name = "SliderTrack",
                        BackgroundColor3 = theme.Secondary,
                        Size = UDim2.new(1, 0, 0, 5),
                        Position = UDim2.new(0, 0, 0, 25),
                        Children = {
                            Create("UICorner", { CornerRadius = UDim.new(1, 0) }),
                            Create("Frame", {
                                Name = "SliderFill",
                                BackgroundColor3 = theme.Accent,
                                Size = UDim2.new((value - min) / (max - min), 0, 1, 0),
                                Children = {
                                    Create("UICorner", { CornerRadius = UDim.new(1, 0) })
                                }
                            }),
                            Create("TextButton", {
                                Name = "SliderButton",
                                BackgroundTransparency = 1,
                                Size = UDim2.new(1, 0, 3, 0),
                                Position = UDim2.new(0, 0, 0, -5),
                                Text = ""
                            })
                        }
                    }),
                    Create("TextLabel", {
                        Name = "MinText",
                        Text = tostring(min),
                        TextColor3 = Color3.fromRGB(150, 150, 150),
                        TextSize = 12,
                        Font = config.Font,
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 0, 0, 35),
                        Size = UDim2.new(0, 30, 0, 15),
                        TextXAlignment = Enum.TextXAlignment.Left
                    }),
                    Create("TextLabel", {
                        Name = "MaxText",
                        Text = tostring(max),
                        TextColor3 = Color3.fromRGB(150, 150, 150),
                        TextSize = 12,
                        Font = config.Font,
                        BackgroundTransparency = 1,
                        Position = UDim2.new(1, -30, 0, 35),
                        Size = UDim2.new(0, 30, 0, 15),
                        TextXAlignment = Enum.TextXAlignment.Right
                    })
                }
            })
            
            sliderFrame.Parent = tabContent
            table.insert(tab.Elements, sliderFrame)
            
            local sliderText = sliderFrame.SliderText
            local sliderTrack = sliderFrame.SliderTrack
            local sliderFill = sliderTrack.SliderFill
            local sliderButton = sliderTrack.SliderButton
            
            local function updateSlider(newValue)
                value = math.clamp(newValue, min, max)
                sliderText.Text = tostring(math.floor(value * 100) / 100)
                sliderFill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
                callback(value)
            end
            
            local sliding = false
            
            sliderButton.MouseButton1Down:Connect(function()
                sliding = true
                
                local connection
                connection = game:GetService("UserInputService").InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement and sliding then
                        local mousePos = game:GetService("UserInputService"):GetMouseLocation()
                        local sliderPos = sliderTrack.AbsolutePosition
                        local sliderSize = sliderTrack.AbsoluteSize
                        
                        local relativeX = (mousePos.X - sliderPos.X) / sliderSize.X
                        relativeX = math.clamp(relativeX, 0, 1)
                        
                        local newValue = min + (max - min) * relativeX
                        updateSlider(newValue)
                    end
                end)
                
                game:GetService("UserInputService").InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        sliding = false
                        connection:Disconnect()
                    end
                end)
            end)
            
            updateSlider(value)
            
            -- Update canvas size
            tabContent.CanvasSize = UDim2.new(0, 0, 0, tabContent.UIListLayout.AbsoluteContentSize.Y)
            
            local slider = {
                Value = value,
                Set = function(self, newValue)
                    updateSlider(newValue)
                end
            }
            
            return slider
        end
        
        -- Create dropdown element
        function tab:CreateDropdown(options, default, callback)
            local selected = default or options[1]
            local opened = false
            
            local dropdownFrame = Create("Frame", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 30),
                Children = {
                    Create("TextButton", {
                        Name = "DropdownButton",
                        Text = selected,
                        TextColor3 = theme.Text,
                        TextSize = 14,
                        Font = config.Font,
                        BackgroundColor3 = theme.Secondary,
                        Size = UDim2.new(1, 0, 0, 30),
                        AutoButtonColor = false,
                        Children = {
                            Create("UICorner", { CornerRadius = UDim.new(0, 6) }),
                            Create("UIStroke", {
                                Color = theme.Outline,
                                Thickness = 1
                            }),
                            Create("ImageLabel", {
                                Name = "DropdownIcon",
                                Image = "rbxassetid://3926305904",
                                ImageRectOffset = Vector2.new(564, 284),
                                ImageRectSize = Vector2.new(36, 36),
                                BackgroundTransparency = 1,
                                Size = UDim2.new(0, 20, 0, 20),
                                Position = UDim2.new(1, -25, 0.5, -10),
                                AnchorPoint = Vector2.new(1, 0.5),
                                Rotation = 180
                            })
                        }
                    }),
                    Create("Frame", {
                        Name = "DropdownList",
                        BackgroundColor3 = theme.Secondary,
                        Size = UDim2.new(1, 0, 0, 0),
                        Position = UDim2.new(0, 0, 0, 35),
                        ClipsDescendants = true,
                        Visible = false,
                        Children = {
                            Create("UICorner", { CornerRadius = UDim.new(0, 6) }),
                            Create("UIStroke", {
                                Color = theme.Outline,
                                Thickness = 1
                            }),
                            Create("UIListLayout", {
                                SortOrder = Enum.SortOrder.LayoutOrder
                            }),
                            Create("UIPadding", {
                                PaddingTop = UDim.new(0, 5),
                                PaddingBottom = UDim.new(0, 5)
                            })
                        }
                    })
                }
            })
            
            dropdownFrame.Parent = tabContent
            table.insert(tab.Elements, dropdownFrame)
            
            local dropdownButton = dropdownFrame.DropdownButton
            local dropdownIcon = dropdownButton.DropdownIcon
            local dropdownList = dropdownFrame.DropdownList
            
            local function toggleDropdown()
                opened = not opened
                dropdownList.Visible = opened
                
                TweenService.Create(dropdownIcon, TweenInfo.new(config.AnimationSpeed), {
                    Rotation = opened and 0 or 180
                })
                
                TweenService.Create(dropdownList, TweenInfo.new(config.AnimationSpeed), {
                    Size = UDim2.new(1, 0, 0, opened and (math.min(#options, 5) * 30 + 10) or 0)
                })
            end
            
            dropdownButton.MouseButton1Click:Connect(toggleDropdown)
            
            for _, option in ipairs(options) do
                local optionButton = Create("TextButton", {
                    Text = option,
                    TextColor3 = theme.Text,
                    TextSize = 14,
                    Font = config.Font,
                    BackgroundColor3 = theme.Secondary,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, -10, 0, 30),
                    AutoButtonColor = false,
                    Children = {
                        Create("UICorner", { CornerRadius = UDim.new(0, 4) })
                    }
                })
                
                optionButton.Parent = dropdownList
                
                -- Option hover effects
                optionButton.MouseEnter:Connect(function()
                    TweenService.Create(optionButton, TweenInfo.new(config.AnimationSpeed), {
                        BackgroundTransparency = 0.9
                    })
                end)
                
                optionButton.MouseLeave:Connect(function()
                    TweenService.Create(optionButton, TweenInfo.new(config.AnimationSpeed), {
                        BackgroundTransparency = 1
                    })
                end)
                
                -- Option selection
                optionButton.MouseButton1Click:Connect(function()
                    selected = option
                    dropdownButton.Text = selected
                    toggleDropdown()
                    callback(selected)
                end)
            end
            
            -- Update canvas size
            tabContent.CanvasSize = UDim2.new(0, 0, 0, tabContent.UIListLayout.AbsoluteContentSize.Y)
            
            local dropdown = {
                Value = selected,
                Set = function(self, newValue)
                    if table.find(options, newValue) then
                        selected = newValue
                        dropdownButton.Text = selected
                        callback(selected)
                    end
                end
            }
            
            return dropdown
        end
        
        -- Create textbox element
        function tab:CreateTextbox(placeholder, callback)
            local textboxFrame = Create("Frame", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 40),
                Children = {
                    Create("TextBox", {
                        PlaceholderText = placeholder,
                        Text = "",
                        TextColor3 = theme.Text,
                        PlaceholderColor3 = Color3.fromRGB(150, 150, 150),
                        TextSize = 14,
                        Font = config.Font,
                        BackgroundColor3 = theme.Secondary,
                        Size = UDim2.new(1, 0, 0, 35),
                        BorderSizePixel = 0,
                        Children = {
                            Create("UICorner", { CornerRadius = UDim.new(0, 6) }),
                            Create("UIStroke", {
                                Color = theme.Outline,
                                Thickness = 1
                            }),
                            Create("UIPadding", {
                                PaddingLeft = UDim.new(0, 10),
                                PaddingRight = UDim.new(0, 10)
                            })
                        }
                    })
                }
            })
            
            textboxFrame.Parent = tabContent
            table.insert(tab.Elements, textboxFrame)
            
            local textbox = textboxFrame.TextBox
            
            -- Textbox focus effects
            textbox.Focused:Connect(function()
                TweenService.Create(textbox, TweenInfo.new(config.AnimationSpeed), {
                    BackgroundColor3 = Color3.new(
                        theme.Secondary.R * 1.1,
                        theme.Secondary.G * 1.1,
                        theme.Secondary.B * 1.1
                    )
                })
            end)
            
            textbox.FocusLost:Connect(function()
                TweenService.Create(textbox, TweenInfo.new(config.AnimationSpeed), {
                    BackgroundColor3 = theme.Secondary
                })
                
                if textbox.Text ~= "" then
                    callback(textbox.Text)
                end
            end)
            
            -- Update canvas size
            tabContent.CanvasSize = UDim2.new(0, 0, 0, tabContent.UIListLayout.AbsoluteContentSize.Y)
            
            return textbox
        end
        
        -- Create keybind element
        function tab:CreateKeybind(name, defaultKey, callback)
            local key = defaultKey or Enum.KeyCode.Unknown
            local listening = false
            
            local keybindFrame = Create("Frame", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 30),
                Children = {
                    Create("TextLabel", {
                        Text = name,
                        TextColor3 = theme.Text,
                        TextSize = 14,
                        Font = config.Font,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(0.6, 0, 1, 0),
                        TextXAlignment = Enum.TextXAlignment.Left
                    }),
                    Create("TextButton", {
                        Name = "KeybindButton",
                        Text = key.Name,
                        TextColor3 = theme.Text,
                        TextSize = 14,
                        Font = config.Font,
                        BackgroundColor3 = theme.Secondary,
                        Size = UDim2.new(0.4, 0, 0, 30),
                        Position = UDim2.new(0.6, 0, 0, 0),
                        AutoButtonColor = false,
                        Children = {
                            Create("UICorner", { CornerRadius = UDim.new(0, 6) }),
                            Create("UIStroke", {
                                Color = theme.Outline,
                                Thickness = 1
                            })
                        }
                    })
                }
            })
            
            keybindFrame.Parent = tabContent
            table.insert(tab.Elements, keybindFrame)
            
            local keybindButton = keybindFrame.KeybindButton
            
            local function setKey(newKey)
                key = newKey
                keybindButton.Text = newKey.Name
                callback(newKey)
            end
            
            keybindButton.MouseButton1Click:Connect(function()
                listening = true
                keybindButton.Text = "..."
                
                local connection
                connection = game:GetService("UserInputService").InputBegan:Connect(function(input)
                    if listening and input.UserInputType == Enum.UserInputType.Keyboard then
                        listening = false
                        setKey(input.KeyCode)
                        connection:Disconnect()
                    end
                end)
            end)
            
            -- Update canvas size
            tabContent.CanvasSize = UDim2.new(0, 0, 0, tabContent.UIListLayout.AbsoluteContentSize.Y)
            
            local keybind = {
                Value = key,
                Set = function(self, newKey)
                    setKey(newKey)
                end
            }
            
            return keybind
        end
        
        -- Create color picker element
        function tab:CreateColorPicker(name, defaultColor, callback)
            local color = defaultColor or Color3.new(1, 1, 1)
            local opened = false
            
            local colorPickerFrame = Create("Frame", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 30),
                Children = {
                    Create("TextLabel", {
                        Text = name,
                        TextColor3 = theme.Text,
                        TextSize = 14,
                        Font = config.Font,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(0.6, 0, 1, 0),
                        TextXAlignment = Enum.TextXAlignment.Left
                    }),
                    Create("TextButton", {
                        Name = "ColorButton",
                        Text = "",
                        BackgroundColor3 = color,
                        Size = UDim2.new(0.4, 0, 0, 30),
                        AutoButtonColor = false,
                        Children = {
                            Create("UICorner", { CornerRadius = UDim.new(0, 6) }),
                            Create("UIStroke", {
                                Color = theme.Outline,
                                Thickness = 1
                            })
                        }
                    }),
                    Create("Frame", {
                        Name = "ColorPicker",
                        BackgroundColor3 = theme.Secondary,
                        Size = UDim2.new(0, 200, 0, 0),
                        Position = UDim2.new(0.6, 0, 0, 35),
                        Visible = false,
                        ClipsDescendants = true,
                        Children = {
                            Create("UICorner", { CornerRadius = UDim.new(0, 6) }),
                            Create("UIStroke", {
                                Color = theme.Outline,
                                Thickness = 1
                            }),
                            Create("ImageLabel", {
                                Name = "ColorMap",
                                Image = "rbxassetid://2615689005",
                                BackgroundTransparency = 1,
                                Size = UDim2.new(1, -40, 0, 150),
                                Position = UDim2.new(0, 5, 0, 5)
                            }),
                            Create("Frame", {
                                Name = "ColorSlider",
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                Size = UDim2.new(0, 20, 0, 150),
                                Position = UDim2.new(1, -30, 0, 5),
                                Children = {
                                    Create("UIGradient", {
                                        Color = ColorSequence.new({
                                            ColorSequenceKeypoint.new(0, Color3.new(1, 0, 0)),
                                            ColorSequenceKeypoint.new(0.17, Color3.new(1, 1, 0)),
                                            ColorSequenceKeypoint.new(0.33, Color3.new(0, 1, 0)),
                                            ColorSequenceKeypoint.new(0.5, Color3.new(0, 1, 1)),
                                            ColorSequenceKeypoint.new(0.67, Color3.new(0, 0, 1)),
                                            ColorSequenceKeypoint.new(0.83, Color3.new(1, 0, 1)),
                                            ColorSequenceKeypoint.new(1, Color3.new(1, 0, 0))
                                        })
                                    })
                                }
                            }),
                            Create("Frame", {
                                Name = "NewColor",
                                BackgroundColor3 = color,
                                Size = UDim2.new(0, 30, 0, 30),
                                Position = UDim2.new(0, 5, 0, 160),
                                Children = {
                                    Create("UICorner", { CornerRadius = UDim.new(0, 4) }),
                                    Create("UIStroke", {
                                        Color = theme.Outline,
                                        Thickness = 1
                                    })
                                }
                            }),
                            Create("TextButton", {
                                Name = "ConfirmButton",
                                Text = "Confirm",
                                TextColor3 = theme.Text,
                                TextSize = 14,
                                Font = config.Font,
                                BackgroundColor3 = theme.Accent,
                                Size = UDim2.new(0, 80, 0, 25),
                                Position = UDim2.new(1, -85, 0, 165),
                                Children = {
                                    Create("UICorner", { CornerRadius = UDim.new(0, 4) }),
                                    Create("UIStroke", {
                                        Color = theme.Outline,
                                        Thickness = 1
                                    })
                                }
                            })
                        }
                    })
                }
            })
            
            colorPickerFrame.Parent = tabContent
            table.insert(tab.Elements, colorPickerFrame)
            
            local colorButton = colorPickerFrame.ColorButton
            local colorPicker = colorPickerFrame.ColorPicker
            local colorMap = colorPicker.ColorMap
            local colorSlider = colorPicker.ColorSlider
            local newColor = colorPicker.NewColor
            local confirmButton = colorPicker.ConfirmButton
            
            local function togglePicker()
                opened = not opened
                colorPicker.Visible = opened
                
                TweenService.Create(colorPicker, TweenInfo.new(config.AnimationSpeed), {
                    Size = UDim2.new(0, 200, 0, opened and 190 or 0)
                })
            end
            
            colorButton.MouseButton1Click:Connect(togglePicker)
            
            local function updateColor(hue, sat, val)
                color = Color3.fromHSV(hue, sat, val)
                newColor.BackgroundColor3 = color
            end
            
            local hue, sat, val = color:ToHSV()
            
            local function updateFromMap(pos)
                local x = (pos.X - colorMap.AbsolutePosition.X) / colorMap.AbsoluteSize.X
                local y = (pos.Y - colorMap.AbsolutePosition.Y) / colorMap.AbsoluteSize.Y
                
                sat = math.clamp(x, 0, 1)
                val = 1 - math.clamp(y, 0, 1)
                
                updateColor(hue, sat, val)
            end
            
            local function updateFromSlider(pos)
                local y = (pos.Y - colorSlider.AbsolutePosition.Y) / colorSlider.AbsoluteSize.Y
                hue = 1 - math.clamp(y, 0, 1)
                
                updateColor(hue, sat, val)
            end
            
            colorMap.MouseButton1Down:Connect(function()
                updateFromMap(game:GetService("UserInputService"):GetMouseLocation())
                
                local connection
                connection = game:GetService("UserInputService").InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        updateFromMap(input.Position)
                    end
                end)
                
                game:GetService("UserInputService").InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        connection:Disconnect()
                    end
                end)
            end)
            
            colorSlider.MouseButton1Down:Connect(function()
                updateFromSlider(game:GetService("UserInputService"):GetMouseLocation())
                
                local connection
                connection = game:GetService("UserInputService").InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        updateFromSlider(input.Position)
                    end
                end)
                
                game:GetService("UserInputService").InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        connection:Disconnect()
                    end
                end)
            end)
            
            confirmButton.MouseButton1Click:Connect(function()
                colorButton.BackgroundColor3 = color
                callback(color)
                togglePicker()
            end)
            
            -- Update canvas size
            tabContent.CanvasSize = UDim2.new(0, 0, 0, tabContent.UIListLayout.AbsoluteContentSize.Y)
            
            local picker = {
                Value = color,
                Set = function(self, newColor)
                    color = newColor
                    colorButton.BackgroundColor3 = color
                    newColor.BackgroundColor3 = color
                    callback(color)
                end
            }
            
            return picker
        end
        
        return tab
    end
    
    -- Switch between tabs
    function window:SwitchTab(tab)
        if self.CurrentTab then
            self.CurrentTab.TabContent.Visible = false
            TweenService.Create(self.CurrentTab.TabButton, TweenInfo.new(config.AnimationSpeed), {
                BackgroundColor3 = theme.Secondary
            })
        end
        
        self.CurrentTab = tab
        tab.TabContent.Visible = true
        TweenService.Create(tab.TabButton, TweenInfo.new(config.AnimationSpeed), {
            BackgroundColor3 = theme.Accent
        })
    end
    
    -- Create notification
    function window:Notification(title, text, duration, notificationType)
        duration = duration or 5
        notificationType = notificationType or "Info"
        
        local theme = getgenv().StratusSettings.Theme
        local config = getgenv().StratusSettings.Config
        
        local accentColor
        if notificationType == "Success" then
            accentColor = theme.Success
        elseif notificationType == "Warning" then
            accentColor = theme.Warning
        elseif notificationType == "Error" then
            accentColor = theme.Error
        else
            accentColor = theme.Accent
        end
        
        local notification = Create("Frame", {
            Name = "Notification",
            BackgroundColor3 = theme.Notification,
            Size = UDim2.new(0, 300, 0, 0),
            Position = UDim2.new(1, -320, 1, -80),
            AnchorPoint = Vector2.new(1, 1),
            ClipsDescendants = true,
            Children = {
                Create("UICorner", { CornerRadius = UDim.new(0, 8) }),
                Create("UIStroke", {
                    Color = theme.Outline,
                    Thickness = 1,
                    Transparency = 0.5
                }),
                Create("Frame", {
                    Name = "TopBar",
                    BackgroundColor3 = accentColor,
                    Size = UDim2.new(1, 0, 0, 5),
                    BorderSizePixel = 0
                }),
                Create("TextLabel", {
                    Name = "Title",
                    Text = title,
                    TextColor3 = theme.Text,
                    TextSize = 16,
                    Font = config.FontBold,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 15, 0, 10),
                    Size = UDim2.new(1, -30, 0, 20),
                    TextXAlignment = Enum.TextXAlignment.Left
                }),
                Create("TextLabel", {
                    Name = "Text",
                    Text = text,
                    TextColor3 = Color3.fromRGB(200, 200, 200),
                    TextSize = 14,
                    Font = config.Font,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 15, 0, 35),
                    Size = UDim2.new(1, -30, 0, 0),
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextWrapped = true
                }),
                Create("Frame", {
                    Name = "ProgressBar",
                    BackgroundColor3 = accentColor,
                    Size = UDim2.new(1, 0, 0, 2),
                    Position = UDim2.new(0, 0, 1, -2),
                    AnchorPoint = Vector2.new(0, 1),
                    BorderSizePixel = 0
                })
            }
        })
        
        notification.Parent = self.ScreenGui
        
        local textLabel = notification.Text
        textLabel.Size = UDim2.new(1, -30, 0, textLabel.TextBounds.Y)
        
        local totalHeight = textLabel.AbsolutePosition.Y + textLabel.AbsoluteSize.Y - notification.AbsolutePosition.Y + 15
        notification.Size = UDim2.new(0, 300, 0, totalHeight)
        
        TweenService.Create(notification, TweenInfo.new(0.3), {
            Size = UDim2.new(0, 300, 0, totalHeight)
        })
        
        local progressBar = notification.ProgressBar
        TweenService.Create(progressBar, TweenInfo.new(duration), {
            Size = UDim2.new(0, 0, 0, 2)
        })
        
        spawn(function()
            wait(duration)
            TweenService.Create(notification, TweenInfo.new(0.3), {
                Size = UDim2.new(0, 300, 0, 0)
            })
            wait(0.3)
            notification:Destroy()
        end)
    end
    
    return window
end

getgenv().Stratus = Stratus

-- Example usage:
--[[
loadstring(game:HttpGet("https://raw.githubusercontent.com/username/repo/main/Stratus.lua"))()

local stratus = Stratus:CreateWindow("Stratus Hub")

local credits = stratus:CreateTab("Credits")
credits:CreateLabel("UI Library: Stratus")
credits:CreateLabel("Created by Joey")

local main = stratus:CreateTab("Main")
local walkspeed = 16

main:CreateToggle("Speed Toggle", false, function(state)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = state and walkspeed or 16
end)

main:CreateSlider(16, 100, 16, function(value)
    walkspeed = value
end)

stratus:Notification("Welcome", "Thank you for using Stratus!", 5, "Success")
]]
